---
const THEMES = ["Claro", "Oscuro", "Sistema"];

import MoonIcon from './icons/MoonIcon.astro'
import SunIcon from './icons/SunIcon.astro'
import SystemIcon from './icons/SystemIcon.astro'
---

<div class="fixed top-4 right-4 z-50 ml-1 mr-1">
	<button
		id="theme-toggle-btn"
		class="appearance-none border-none flex hover:scale-125 transition-all p-3 rounded-full bg-gray-300 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 duration-200 shadow-lg"
	>
		<span class="sr-only">Elige el tema</span>
		<SunIcon />
		<MoonIcon />
		<SystemIcon />
	</button>
	<div
		id="themes-menu"
		class="absolute hidden scale-80 top-16 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md dark:text-white"
	>
		<ul>
			{
				THEMES.map((theme) => (
					<li 
						class="themes-menu-option px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm" 
						role="button"
						tabindex="0"
						aria-label={`Cambiar a tema ${theme}`}
					>
						{theme}
					</li>
				))
			}
		</ul>
	</div>
</div>

<style>
	#themes-menu.open {
		display: inline;
		animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
	}

	@keyframes scale-up-center {
		from {
			transform: scale(0.8);
			opacity: 0;
		}

		to {
			transform: scale(1);
			opacity: 1;
		}
	}
</style>

<script is:inline>
	let remove = null;
	const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
	const themesMenu = document.getElementById("themes-menu");

	const getThemePreference = () => {
		if (typeof localStorage !== "undefined") {
			return localStorage.getItem("theme") ?? "system";
		}

		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};

	const updateIcon = (themePreference) => {
		document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
			element.style.scale = element.id === themePreference ? "1" : "0";
		});
	};

	const updateTheme = () => {
		if (remove != null) {
			remove();
		}
		matchMedia.addEventListener("change", updateTheme);
		remove = () => {
			matchMedia.removeEventListener("change", updateTheme);
		};

		const themePreference = getThemePreference();
		const isDark =
			themePreference === "dark" ||
			(themePreference === "system" && matchMedia.matches);

		updateIcon(themePreference);
		document.documentElement.classList[isDark ? "add" : "remove"]("dark");
	};

	updateTheme();

	document.addEventListener("click", () => themesMenu.classList.remove("open"));

	document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
		e.stopPropagation();
		const isClosed = !themesMenu.classList.contains("open");
		themesMenu.classList[isClosed ? "add" : "remove"]("open");
	});

	document.querySelectorAll(".themes-menu-option").forEach((element) => {
		element.addEventListener("click", (e) => {
			const themeText = e.target.innerText.toLowerCase().trim();
			// Convertir español a inglés para localStorage
			const themeMap = {
				"claro": "light",
				"oscuro": "dark",
				"sistema": "system"
			};
			localStorage.setItem("theme", themeMap[themeText] || themeText);
			updateTheme();
		});
		
		// Soporte para navegación con teclado (Enter y Espacio)
		element.addEventListener("keydown", (e) => {
			if (e.key === "Enter" || e.key === " ") {
				e.preventDefault();
				const themeText = e.target.innerText.toLowerCase().trim();
				// Convertir español a inglés para localStorage
				const themeMap = {
					"claro": "light",
					"oscuro": "dark",
					"sistema": "system"
				};
				localStorage.setItem("theme", themeMap[themeText] || themeText);
				updateTheme();
			}
		});
	});
</script>
