---
import DashboardLayout from '../layouts/DashboardLayout.astro';
---

<DashboardLayout title="Configuración de Accesibilidad" activePage="accesibilidad">
  <div class="flex-1 p-4 sm:p-6 lg:p-8 overflow-y-auto">
    
    <div class="mb-8">
      <h2 class="text-2xl sm:text-3xl font-bold mb-2">Configuración de Accesibilidad</h2>
      <p class="text-gray-600 dark:text-gray-400">Personaliza la interfaz según tus necesidades</p>
    </div>

    {/* Sección de tema visual */}
    <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 mb-6 shadow-sm">
      <div class="flex items-center justify-between">
        <div>
          <h3 class="text-xl font-bold mb-4 flex items-center gap-2">
            <span class="material-symbols-outlined text-primary">palette</span>
            Modo de visualización
          </h3>
          <p class="mb-4 flex items-center gap-2">Cambia entre el tema claro y oscuro</p>
        </div>
      
        <div>
          <span class="material-symbols-outlined text-primary">light_mode</span>
          <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" id="dark-mode" class="sr-only peer" />
            <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
          </label>
          <span class="material-symbols-outlined text-primary">dark_mode</span>
        </div>
        
      </div>

    </div>

    <!--
    {/* Tamaño de texto */}
    <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 mb-6 shadow-sm">
      <h3 class="text-xl font-bold mb-4 flex items-center gap-2">
        <span class="material-symbols-outlined text-primary">format_size</span>
        Tamaño de Texto
      </h3>
      <div class="flex flex-col gap-4">
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium">Tamaño del texto</span>
          <span class="text-sm text-gray-600 dark:text-gray-400" id="text-size-value">100%</span>
        </div>
        <input 
          id="text-size-range"
          type="range" 
          min="800" 
          max="150" 
          value="100" 
          class="w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer [&::-webkit-slider-thumb]:bg-primary"
        />
        <div class="flex justify-between text-xs text-gray-500 dark:text-gray-400">
          <span>80%</span>
          <span>100%</span>
          <span>120%</span>
          <span>150%</span>
        </div>
        <div class="p-4 bg-gray-50 dark:bg-gray-900 rounded-lg">
          <p class="mb-2">Vista previa del texto:</p>
          <p class="text-lg" id="text-preview">Este es un ejemplo de cómo se verá el texto con el tamaño seleccionado.</p>
        </div>
      </div>
    </div>
   
    {/* Contraste */}
    <div class="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 mb-6 shadow-sm">
      <h3 class="text-xl font-bold mb-4 flex items-center gap-2">
        <span class="material-symbols-outlined text-primary">contrast</span>
        Alto Contraste
      </h3>
      <div class="flex items-center justify-between">
        <div>
          <p class="font-medium">Activar modo de alto contraste</p>
          <p class="text-sm text-gray-600 dark:text-gray-400">Mejora la visibilidad de los elementos en pantalla</p>
        </div>
        <label class="relative inline-flex items-center cursor-pointer">
          <input type="checkbox" id="high-contrast-toggle" class="sr-only peer" />
          <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
        </label>
      </div>
    </div>
    
    -->

    {/* Botones de acción */}
    <div class="flex flex-col sm:flex-row gap-4 justify-end">
      <button id="reset-btn" class="px-6 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
        Restaurar valores por defecto
      </button>
      <button class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors">
        Guardar cambios
      </button>
    </div>

  </div>
</DashboardLayout>

<script is:inline>
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const darkModeToggle = document.getElementById("dark-mode");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }
    return matchMedia.matches ? "dark" : "light";
  };

  const updateTheme = () => {
    const themePreference = getThemePreference();
    const isDark = themePreference === "dark" || (themePreference === "system" && matchMedia.matches);

    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    // Actualizar el estado del checkbox
    darkModeToggle.checked = isDark;
  };

  // Inicializar
  updateTheme();
  matchMedia.addEventListener("change", updateTheme);

  //Escuchar cambios del checkbox
  darkModeToggle.addEventListener("change", (e) => {
    const isDark = e.target.checked;
    localStorage.setItem("theme", isDark ? "dark" : "light");
    updateTheme();
  });

  // Evento click en botones de tema
  document.querySelectorAll(".theme-option").forEach(button => {
    button.addEventListener("click", () => {
      localStorage.setItem("theme", button.dataset.theme);
      updateTheme();
    });
  });

  // Tamaño de texto
  const range = document.getElementById("text-size-range");
  const textValue = document.getElementById("text-size-value");
  const textPreview = document.getElementById("text-preview");

  range.addEventListener("input", () => {
    textValue.textContent = range.value + "%";
    textPreview.style.fontSize = range.value + "%";
  });

  /*
  // Alto contraste
  const contrastToggle = document.getElementById("high-contrast-toggle");
  contrastToggle.addEventListener("change", () => {
    document.body.classList.toggle("high-contrast", contrastToggle.checked);
  });
  */

  // Restaurar valores
  document.getElementById("reset-btn").addEventListener("click", () => {
    localStorage.removeItem("theme");
    range.value = 100;
    textValue.textContent = "100%";
    textPreview.style.fontSize = "100%";
    contrastToggle.checked = false;
    document.body.classList.remove("high-contrast");
    updateTheme();
  });
</script>

<!--
<style>
  /* Modo alto contraste */
  .high-contrast {
    filter: contrast(1.5);
  }
</style>
-->
