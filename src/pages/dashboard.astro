---
import { getCollection } from 'astro:content';
import DashboardLayout from '../layouts/DashboardLayout.astro';

// Obtener TODOS los datos de pacientes
const todosPacientes = await getCollection('datosPrincipales');

// Preparar datos para las gráficas

// 1. Distribución por sexo
const pacientesHombres = todosPacientes.filter(p => p.data.sexo === 1).length;
const pacientesMujeres = todosPacientes.filter(p => p.data.sexo === 2).length;

// 2. Top 10 diagnósticos principales
const diagnosticos = todosPacientes.reduce((acc, p) => {
  const diag = p.data.diagnostico_principal;
  acc[diag] = (acc[diag] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

const top10Diagnosticos = Object.entries(diagnosticos)
  .sort((a, b) => b[1] - a[1])
  .slice(0, 10);


// 3. Días de estancia (distribución)
const estanciaDistribucion = todosPacientes.reduce((acc, p) => {
  const dias = p.data.estancia_dias;
  let rango = '';
  if (dias <= 3) rango = '1-3 días';
  else if (dias <= 7) rango = '4-7 días';
  else if (dias <= 14) rango = '8-14 días';
  else if (dias <= 30) rango = '15-30 días';
  else rango = 'Más de 30 días';
  acc[rango] = (acc[rango] || 0) + 1;
  return acc;
}, {} as Record<string, number>);


// 4. Distribución por edad (grupos)
const gruposEdad = todosPacientes.reduce((acc, p) => {
  const edad = p.data.edad;
  let grupo = '';
  if (edad < 18) grupo = '0-17';
  else if (edad < 30) grupo = '18-29';
  else if (edad < 45) grupo = '30-44';
  else if (edad < 60) grupo = '45-59';
  else if (edad < 75) grupo = '60-74';
  else grupo = '75+';
  acc[grupo] = (acc[grupo] || 0) + 1;
  return acc;
}, {} as Record<string, number>);




// 5. Distribución por categoría de ingreso
const categorias = todosPacientes.reduce((acc, p) => {
  const categoria = p.data.categoria_ingreso_descripcion || 'Sin categoría';
  acc[categoria] = (acc[categoria] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

// 6. Distribución por comunidad autónoma
const comunidades = todosPacientes.reduce((acc, p) => {
  const ccaa = p.data.ccaa;
  let nombreCCAA = '';
  
  // Mapeo basado en los códigos reales de la base de datos
  switch(ccaa) {
    case 1: nombreCCAA = 'Andalucía'; break;
    case 2: nombreCCAA = 'La Rioja'; break;
    case 3: nombreCCAA = 'Asturias'; break;
    case 4: nombreCCAA = 'Baleares'; break;
    case 5: nombreCCAA = 'Canarias'; break;
    case 6: nombreCCAA = 'Cantabria'; break;
    case 7: nombreCCAA = 'Castilla y León'; break;
    case 8: nombreCCAA = 'Castilla-La Mancha'; break;
    case 9: nombreCCAA = 'Cataluña'; break;
    case 10: nombreCCAA = 'Comunidad Valenciana'; break;
    case 11: nombreCCAA = 'Extremadura'; break;
    case 12: nombreCCAA = 'Galicia'; break;
    case 13: nombreCCAA = 'Madrid'; break;
    case 14: nombreCCAA = 'Murcia'; break;
    case 15: nombreCCAA = 'Navarra'; break;
    case 16: nombreCCAA = 'País Vasco'; break;
    case 17: nombreCCAA = 'Aragón'; break;
    case 18: nombreCCAA = 'Ceuta'; break;
    case 19: nombreCCAA = 'Melilla'; break;
    default: nombreCCAA = 'Sin especificar'; break;
  }
  
  acc[nombreCCAA] = (acc[nombreCCAA] || 0) + 1;
  return acc;
}, {} as Record<string, number>);
---


<DashboardLayout title="Dashboard de Salud Pública" activePage="dashboard">
  <main class="flex-1 p-4 sm:p-6 lg:p-8 overflow-y-auto">

    {/* Sección de bienvenida */}
    <header class="mb-8 lg:mb-10">
      <h1 class="text-3xl sm:text-4xl font-bold mb-2 flex items-center gap-2">
        ¡Bienvenido al Panel de Salud Pública!  
        <span class="material-symbols-outlined text-4xl text-blue-500">emoji_people</span>
      </h1>
      <p class="text-gray-600 dark:text-gray-400 max-w-2xl">
        Consulta las métricas de salud en tiempo real, analiza los ingresos hospitalarios 
        y obtén una visión general de la situación sanitaria por comunidad autónoma.
      </p>
    </header>

    <!-- Grid de gráficas -->
    <section class="grid grid-cols-1 lg:grid-cols-2 gap-6">

      <!-- Gráfica 1: Distribución por Sexo (Pie Chart) -->
      <article class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 border border-gray-200 dark:border-gray-700">
        <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-gray-100">Distribución por Sexo</h2>
        <div id="chartSexo" style="height: 400px;"></div>
      </article>

      <!-- Gráfica 2: Top 10 Diagnósticos (Bar Chart) -->
      <article class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 border border-gray-200 dark:border-gray-700">
        <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-gray-100">Top 10 Diagnósticos Principales</h2>
        <div id="chartDiagnosticos" style="height: 500px;"></div>
      </article>

      <!-- Gráfica 3: Distribución de Estancia (Bar Chart Horizontal) -->
      <article class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 border border-gray-200 dark:border-gray-700">
        <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-gray-100">Distribución de Días de Estancia</h2>
        <div id="chartEstancia" style="height: 400px;"></div>
      </article>

      <!-- Gráfica 4: Distribución por Grupos de Edad (Doughnut Chart) -->
      <article class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 border border-gray-200 dark:border-gray-700">
        <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-gray-100">Distribución por Grupos de Edad</h2>
        <div id="chartEdad" style="height: 400px;"></div>
      </article>

      <!-- Gráfica 5: Distribución por Categoría de Ingreso (Radar Chart) -->
      <article class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 border border-gray-200 dark:border-gray-700">
        <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-gray-100">Distribución por Categoría</h2>
        <div id="chartCategorias" style="height: 400px;"></div>
      </article>

      <!-- Gráfica 6: Distribución por Comunidad Autónoma (Pie Chart) -->
      <article class="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6 border border-gray-200 dark:border-gray-700">
        <h2 class="text-xl font-bold mb-4 text-gray-800 dark:text-gray-100">Distribución por CCAA</h2>
        <div id="chartComunidades" style="height: 400px;"></div>
      </article>

    </section>
  </main>
</DashboardLayout>



<script>
  import * as echarts from 'echarts';

  // Detectar tema oscuro
  const isDark = document.documentElement.classList.contains('dark');
  const theme = isDark ? 'dark' : 'light';

  // Colores para tema claro y oscuro
  const colors = {
    light: {
      text: '#374151',
      background: '#ffffff',
      grid: '#e5e7eb',
    },
    dark: {
      text: '#d1d5db',
      background: '#1f2937',
      grid: '#374151',
    }
  };

  const currentColors = isDark ? colors.dark : colors.light;

  // Gráfica 1: Distribución por Sexo (Pie Chart)
  const chartSexo = echarts.init(document.getElementById('chartSexo'));
  chartSexo.setOption({
    color: ['#3B82F6', '#EC4899'],
    tooltip: {
      trigger: 'item',
      formatter: '{b}: {c} ({d}%)'
    },
    legend: {
      orient: 'vertical',
      left: 'left',
      textStyle: { color: currentColors.text }
    },
    series: [
      {
        name: 'Distribución por Sexo',
        type: 'pie',
        radius: '70%',
        data: [
          { value: window.sexoData.hombres, name: 'Hombres' },
          { value: window.sexoData.mujeres, name: 'Mujeres' }
        ],
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowOffsetX: 0,
            shadowColor: 'rgba(0, 0, 0, 0.5)'
          }
        },
        label: {
          color: currentColors.text
        }
      }
    ]
  });

  // Gráfica 4: Distribución por Grupos de Edad (Doughnut)
  const chartEdad = echarts.init(document.getElementById('chartEdad'));
  chartEdad.setOption({
    tooltip: {
      trigger: 'item',
      formatter: '{b}: {c} ({d}%)'
    },
    legend: {
      orient: 'vertical',
      right: 'right',
      textStyle: { color: currentColors.text }
    },
    series: [
      {
        name: 'Grupos de Edad',
        type: 'pie',
        radius: ['40%', '70%'],
        avoidLabelOverlap: false,
        itemStyle: {
          borderRadius: 10,
          borderColor: currentColors.background,
          borderWidth: 2
        },
        label: {
          show: false,
          position: 'center'
        },
        emphasis: {
          label: {
            show: true,
            fontSize: 20,
            fontWeight: 'bold',
            color: currentColors.text
          }
        },
        labelLine: {
          show: false
        },
        data: Object.entries(window.edadData).map(([key, value]) => ({
          value: value,
          name: key
        }))
      }
    ]
  });

  // Gráfica 3: Distribución de Estancia (Bar Chart Horizontal)
  const chartEstancia = echarts.init(document.getElementById('chartEstancia'));

  //Para el orden de aparición que salgan bien:
  const ordenRangos = ['Más de 30 días', '15-30 días', '8-14 días','4-7 días','1-3 días'];
  const categoriasOrdenadas = ordenRangos.filter(r => window.estanciaData[r] !== undefined);
  const valoresOrdenados = categoriasOrdenadas.map(r => window.estanciaData[r]);

  chartEstancia.setOption({
    tooltip: {
      trigger: 'axis',
      axisPointer: { type: 'shadow' }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'value',
      axisLabel: { color: currentColors.text }
    },
    yAxis: {
      type: 'category',
      data: categoriasOrdenadas,
      axisLabel: { color: currentColors.text }
    },
    series: [
      {
        name: 'Pacientes',
        type: 'bar',
        data: valoresOrdenados,
        itemStyle: {
          color: '#FC4747'
        }
      }
    ]
  });

  // Gráfica 2: Top 10 Diagnósticos (Bar Chart)
  const chartDiagnosticos = echarts.init(document.getElementById('chartDiagnosticos'));
  chartDiagnosticos.setOption({
    tooltip: {
      trigger: 'axis',
      axisPointer: { type: 'shadow' }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'value',
      axisLabel: { color: currentColors.text }
    },
    yAxis: {
      type: 'category',
      data: window.diagnosticosData.map((d: any) => d[0]),
      axisLabel: { 
        color: currentColors.text,
        fontSize: 11
      }
    },
    series: [
      {
        name: 'Casos',
        type: 'bar',
        data: window.diagnosticosData.map((d: any) => d[1]),
        itemStyle: {
          color: '#3B82F6'
        }
      }
    ]
  });

  // Gráfica 5: Distribución por Categoría (Radar Chart con puntos individuales)
  const chartCategorias = echarts.init(document.getElementById('chartCategorias'));
  const categoriaEntries = Object.entries(window.categoriasData);
  const maxValorCategoria = Math.max(...Object.values(window.categoriasData));
  
  // Crear múltiples series, una por cada categoría
  const radarSeries = categoriaEntries.map(([categoria, valor], index) => {
    const values = new Array(categoriaEntries.length).fill(0);
    values[index] = valor;
    return {
      name: categoria,
      type: 'radar',
      symbol: 'circle',
      symbolSize: 8,
      lineStyle: {
        width: 1.5,
        opacity: 0.8
      },
      areaStyle: {
        opacity: 0.1
      },
      data: [
        {
          value: values,
          name: categoria,
          itemStyle: {
            color: `hsl(${(index * 360) / categoriaEntries.length}, 70%, 60%)`
          }
        }
      ]
    };
  });
  
  chartCategorias.setOption({
    tooltip: {
      trigger: 'item',
      confine: true,
      appendToBody: true,
      className: 'custom-tooltip',
      formatter: function(params: any) {
        return `<strong>${params.seriesName}</strong><br/>Pacientes: ${params.value.find((v: number) => v > 0) || 0}`;
      },
      extraCssText: 'z-index: 10000;'
    },
    legend: {
      show: false
    },
    radar: {
      indicator: categoriaEntries.map(([key]) => ({
        name: key.length > 15 ? key.substring(0, 15) + '...' : key,
        max: maxValorCategoria
      })),
      axisName: {
        color: currentColors.text,
        fontSize: 11
      }
    },
    series: radarSeries
  });

  // Gráfica 6: Distribución por Comunidad Autónoma (Pie Chart)
  const chartComunidades = echarts.init(document.getElementById('chartComunidades'));
  chartComunidades.setOption({
    color:['#702EFF', '#CEFF2E'],
    tooltip: {
      trigger: 'item',
      formatter: '{b}: {c} ({d}%)'
    },
    legend: {
      orient: 'vertical',
      left: 'left',
      textStyle: { color: currentColors.text }
    },
    series: [
      {
        name: 'Comunidades Autónomas',
        type: 'pie',
        radius: '70%',
        data: Object.entries(window.comunidadesData).map(([key, value]) => ({
          value: value,
          name: key
        })),
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowOffsetX: 0,
            shadowColor: 'rgba(0, 0, 0, 0.5)'
          }
        },
        label: {
          color: currentColors.text
        }
      }
    ]
  });

  // Hacer las gráficas responsive
  window.addEventListener('resize', () => {
    chartSexo.resize();
    chartEdad.resize();
    chartEstancia.resize();
    chartDiagnosticos.resize();
    chartCategorias.resize();
    chartComunidades.resize();
  });
</script>

<script is:inline define:vars={{ 
  sexoData: { hombres: pacientesHombres, mujeres: pacientesMujeres },
  edadData: gruposEdad,
  estanciaData: estanciaDistribucion,
  diagnosticosData: top10Diagnosticos,
  categoriasData: categorias,
  comunidadesData: comunidades
}}>
  window.sexoData = sexoData;
  window.edadData = edadData;
  window.estanciaData = estanciaData;
  window.diagnosticosData = diagnosticosData;
  window.categoriasData = categoriasData;
  window.comunidadesData = comunidadesData;
</script>
